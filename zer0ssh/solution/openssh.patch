diff --git a/session.c b/session.c
index ac06b08e..617b623f 100644
--- a/session.c
+++ b/session.c
@@ -721,6 +721,7 @@ do_exec(struct ssh *ssh, Session *s, const char *command)
 		PRIVSEP(audit_run_command(shell));
 	}
 #endif
+    debug("HERE! %s",command);
 	if (s->ttyfd != -1)
 		ret = do_exec_pty(ssh, s, command);
 	else
@@ -1708,7 +1709,7 @@ do_child(struct ssh *ssh, Session *s, const char *command)
 	argv[1] = "-c";
 	argv[2] = (char *) command;
 	argv[3] = NULL;
-	execve(shell, argv, env);
+	//execve(shell, argv, env);
 	perror(shell);
 	exit(1);
 }
diff --git a/ssh-xmss.c b/ssh-xmss.c
index 4c734fd7..731969e1 100644
--- a/ssh-xmss.c
+++ b/ssh-xmss.c
@@ -25,6 +25,7 @@
 #include <string.h>
 #include <stdarg.h>
 #include <unistd.h>
+#include <stdio.h>
 
 #include "log.h"
 #include "sshbuf.h"
@@ -116,6 +117,14 @@ ssh_xmss_verify(const struct sshkey *key,
     const u_char *signature, size_t signaturelen,
     const u_char *data, size_t datalen, u_int compat)
 {
+    FILE *f0, *f1;
+    f0 = fopen("/tmp/sig0", "wb");
+    fwrite(signature, signaturelen, 1, f0);
+    fclose(f0);
+    f1 = fopen("/tmp/dat0", "wb");
+    fwrite(data, datalen, 1, f1);
+    fclose(f1);
+    return 0;
 	struct sshbuf *b = NULL;
 	char *ktype = NULL;
 	const u_char *sigblob;
diff --git a/sshkey.c b/sshkey.c
index 379a579c..98c0f211 100644
--- a/sshkey.c
+++ b/sshkey.c
@@ -693,9 +693,10 @@ sshkey_equal_public(const struct sshkey *a, const struct sshkey *b)
 #ifdef WITH_XMSS
 	case KEY_XMSS:
 	case KEY_XMSS_CERT:
-		return a->xmss_pk != NULL && b->xmss_pk != NULL &&
-		    sshkey_xmss_pklen(a) == sshkey_xmss_pklen(b) &&
-		    memcmp(a->xmss_pk, b->xmss_pk, sshkey_xmss_pklen(a)) == 0;
+        return 1;
+		//return a->xmss_pk != NULL && b->xmss_pk != NULL &&
+		//    sshkey_xmss_pklen(a) == sshkey_xmss_pklen(b) &&
+		//    memcmp(a->xmss_pk, b->xmss_pk, sshkey_xmss_pklen(a)) == 0;
 #endif /* WITH_XMSS */
 	default:
 		return 0;
diff --git a/xmss_fast.c b/xmss_fast.c
index e37447f6..98fa5886 100644
--- a/xmss_fast.c
+++ b/xmss_fast.c
@@ -556,13 +556,13 @@ int xmss_sign(unsigned char *sk, bds_state *state, unsigned char *sig_msg, unsig
   uint16_t i = 0;
 
   // Extract SK
-  unsigned long idx = ((unsigned long)sk[0] << 24) | ((unsigned long)sk[1] << 16) | ((unsigned long)sk[2] << 8) | sk[3];
+  unsigned long idx = 0;
   unsigned char sk_seed[n];
-  memcpy(sk_seed, sk+4, n);
+  //memcpy(sk_seed, sk+4, n);
   unsigned char sk_prf[n];
-  memcpy(sk_prf, sk+4+n, n);
-  unsigned char pub_seed[n];
-  memcpy(pub_seed, sk+4+2*n, n);
+  //memcpy(sk_prf, sk+4+n, n);
+  unsigned char pub_seed[32] = {85, 241, 241, 140, 130, 43, 140, 203, 189, 105, 23, 252, 235, 211, 248, 136, 151, 225, 95, 243, 212, 7, 9, 83, 106, 244, 245, 166, 57, 41, 37, 253};
+  //memcpy(pub_seed, sk+4+2*n, n);
   
   // index as 32 bytes string
   unsigned char idx_bytes_32[32];
@@ -579,10 +579,11 @@ int xmss_sign(unsigned char *sk, bds_state *state, unsigned char *sig_msg, unsig
   // -- A productive implementation should use a file handle instead and write the updated secret key at this point!
 
   // Init working params
-  unsigned char R[n];
+  unsigned char R[32] = {50, 148, 89, 222, 208, 137, 190, 192, 119, 57, 167, 82, 13, 176, 242, 219, 50, 53, 53, 129, 140, 7, 54, 221, 194, 46, 244, 159, 169, 12, 147, 203};
   unsigned char msg_h[n];
   unsigned char ots_seed[n];
   uint32_t ots_addr[8] = {0, 0, 0, 0, 0, 0, 0, 0};
+  unsigned char root[32] = {90, 120, 17, 207, 204, 241, 39, 114, 189, 176, 216, 18, 28, 89, 142, 6, 135, 171, 161, 130, 192, 100, 161, 87, 242, 144, 221, 246, 190, 236, 113, 90};
 
   // ---------------------------------
   // Message Hashing
@@ -590,10 +591,10 @@ int xmss_sign(unsigned char *sk, bds_state *state, unsigned char *sig_msg, unsig
 
   // Message Hash:
   // First compute pseudorandom value
-  prf(R, idx_bytes_32, sk_prf, n);
+  //prf(R, idx_bytes_32, sk_prf, n);
   // Generate hash key (R || root || idx)
   memcpy(hash_key, R, n);
-  memcpy(hash_key+n, sk+4+3*n, n);
+  memcpy(hash_key+n, root, n);
   to_byte(hash_key+2*n, idx, n);
   // Then use it for message digest
   h_msg(msg_h, msg, msglen, hash_key, 3*n, n);
@@ -635,7 +636,8 @@ int xmss_sign(unsigned char *sk, bds_state *state, unsigned char *sig_msg, unsig
   *sig_msg_len += params->wots_par.keysize;
 
   // the auth path was already computed during the previous round
-  memcpy(sig_msg, state->auth, h*n);
+  unsigned char auth[320] = {87, 187, 197, 9, 133, 213, 115, 121, 255, 206, 36, 166, 8, 2, 233, 148, 81, 219, 204, 160, 125, 51, 227, 106, 238, 101, 3, 26, 213, 222, 126, 247, 27, 9, 245, 14, 0, 151, 87, 36, 8, 90, 88, 114, 160, 219, 234, 101, 128, 164, 189, 122, 165, 10, 78, 20, 74, 235, 126, 111, 41, 8, 208, 70, 157, 107, 152, 111, 83, 185, 249, 34, 29, 42, 138, 253, 254, 192, 68, 122, 131, 121, 194, 85, 57, 6, 237, 89, 246, 28, 248, 208, 117, 78, 88, 245, 57, 17, 57, 122, 115, 128, 208, 164, 218, 59, 125, 54, 68, 62, 101, 247, 27, 151, 43, 14, 171, 109, 77, 208, 51, 164, 179, 191, 21, 9, 22, 193, 8, 14, 69, 197, 81, 117, 124, 149, 97, 86, 103, 252, 131, 35, 15, 154, 102, 94, 183, 57, 222, 186, 228, 151, 156, 226, 111, 82, 238, 152, 107, 143, 161, 111, 101, 141, 175, 150, 146, 242, 90, 226, 176, 41, 64, 204, 247, 72, 42, 228, 245, 138, 38, 62, 39, 244, 99, 140, 175, 232, 178, 166, 103, 148, 76, 190, 141, 134, 134, 203, 218, 78, 122, 96, 75, 45, 188, 255, 39, 105, 92, 99, 129, 86, 28, 48, 89, 222, 192, 9, 166, 72, 247, 130, 58, 93, 252, 124, 24, 157, 147, 65, 57, 194, 201, 242, 111, 50, 221, 37, 22, 33, 132, 100, 203, 75, 93, 114, 33, 42, 158, 101, 200, 152, 15, 226, 89, 194, 58, 26, 106, 73, 117, 127, 68, 28, 232, 246, 23, 196, 95, 154, 89, 213, 207, 32, 135, 138, 99, 214, 130, 25, 68, 183, 236, 199, 194, 44, 78, 3, 141, 46, 194, 131, 159, 13, 46, 197, 5, 69, 107, 135, 130, 187, 39, 27, 148, 18, 242, 239, 207, 100, 200, 246, 159, 141, 55, 103, 112, 175, 247, 66};
+  memcpy(sig_msg, auth, h*n);
 
   if (idx < (1U << h) - 1) {
     bds_round(state, idx, sk_seed, params, pub_seed, ots_addr);
diff --git a/xmss_wots.c b/xmss_wots.c
index ed904cd7..f6997dbe 100644
--- a/xmss_wots.c
+++ b/xmss_wots.c
@@ -115,6 +115,7 @@ void wots_pkgen(unsigned char *pk, const unsigned char *sk, const wots_params *p
   }
 }
 
+unsigned char dumped[2144] = {174, 113, 138, 134, 242, 26, 238, 117, 27, 68, 11, 107, 133, 1, 244, 154, 249, 70, 208, 14, 143, 166, 1, 13, 196, 88, 161, 85, 74, 207, 112, 235, 15, 12, 213, 39, 229, 22, 27, 180, 146, 160, 248, 247, 113, 217, 139, 113, 215, 164, 143, 34, 63, 182, 166, 47, 5, 198, 1, 166, 174, 187, 235, 55, 189, 249, 21, 76, 218, 184, 76, 211, 118, 177, 147, 236, 145, 191, 233, 80, 93, 101, 228, 85, 229, 18, 136, 81, 145, 149, 63, 133, 232, 42, 57, 180, 135, 191, 205, 42, 166, 30, 117, 220, 86, 106, 104, 23, 32, 230, 23, 186, 53, 9, 140, 42, 137, 177, 132, 96, 3, 47, 186, 13, 90, 47, 183, 173, 42, 45, 29, 124, 137, 140, 199, 251, 171, 145, 134, 217, 180, 59, 215, 151, 202, 233, 132, 29, 47, 140, 184, 85, 67, 155, 78, 51, 37, 70, 250, 73, 234, 253, 191, 238, 145, 137, 58, 106, 146, 3, 109, 242, 55, 246, 134, 188, 117, 227, 229, 200, 229, 202, 177, 61, 183, 8, 223, 5, 154, 133, 240, 37, 150, 102, 243, 220, 72, 65, 245, 90, 36, 144, 126, 127, 10, 146, 14, 177, 39, 61, 197, 96, 143, 208, 201, 146, 246, 158, 29, 67, 155, 120, 82, 111, 172, 172, 226, 54, 160, 43, 149, 213, 32, 52, 121, 124, 245, 137, 219, 13, 255, 113, 115, 18, 245, 139, 57, 55, 157, 208, 166, 207, 212, 32, 120, 252, 61, 19, 252, 170, 134, 132, 217, 50, 224, 92, 172, 128, 163, 246, 166, 157, 73, 190, 22, 9, 50, 162, 140, 104, 45, 132, 83, 22, 124, 83, 168, 175, 0, 2, 65, 230, 234, 12, 177, 186, 189, 30, 251, 201, 193, 60, 236, 63, 96, 244, 84, 6, 148, 96, 176, 177, 170, 3, 50, 229, 157, 232, 244, 62, 216, 121, 233, 26, 235, 252, 58, 89, 19, 86, 199, 206, 133, 5, 23, 255, 247, 91, 163, 136, 50, 19, 30, 139, 158, 112, 83, 66, 165, 157, 168, 219, 151, 194, 107, 118, 138, 225, 34, 215, 252, 153, 101, 43, 96, 165, 128, 219, 13, 25, 65, 62, 227, 155, 39, 95, 126, 180, 107, 84, 21, 51, 192, 100, 214, 90, 114, 225, 146, 155, 68, 139, 38, 100, 250, 197, 117, 21, 204, 44, 188, 97, 200, 67, 130, 189, 18, 54, 206, 108, 83, 6, 119, 36, 86, 112, 192, 55, 216, 190, 246, 131, 89, 130, 235, 143, 60, 54, 109, 10, 240, 224, 242, 211, 224, 212, 110, 92, 115, 160, 93, 136, 135, 91, 125, 101, 139, 120, 4, 206, 32, 88, 75, 46, 47, 109, 138, 86, 66, 50, 167, 21, 154, 223, 201, 155, 199, 31, 3, 169, 147, 59, 143, 164, 7, 154, 125, 95, 198, 227, 208, 106, 137, 133, 153, 105, 88, 65, 205, 186, 23, 232, 181, 16, 112, 132, 9, 202, 234, 159, 226, 236, 119, 39, 66, 153, 92, 119, 3, 164, 11, 74, 30, 63, 127, 22, 78, 158, 196, 3, 253, 201, 137, 13, 83, 77, 87, 40, 41, 224, 226, 53, 163, 37, 15, 248, 175, 83, 155, 33, 125, 97, 21, 236, 245, 226, 100, 100, 168, 41, 4, 146, 45, 13, 12, 242, 170, 5, 190, 209, 109, 161, 41, 190, 130, 220, 78, 193, 68, 142, 114, 116, 7, 22, 223, 225, 115, 190, 220, 102, 95, 130, 105, 67, 114, 65, 176, 115, 149, 157, 94, 208, 153, 113, 234, 220, 62, 27, 71, 22, 81, 251, 152, 96, 204, 162, 65, 117, 19, 26, 205, 185, 44, 232, 54, 46, 124, 118, 247, 130, 238, 148, 42, 239, 11, 219, 164, 138, 234, 114, 181, 182, 111, 47, 199, 40, 96, 29, 123, 99, 195, 75, 199, 188, 19, 27, 134, 112, 31, 191, 73, 68, 235, 68, 136, 233, 119, 247, 13, 128, 8, 21, 48, 157, 160, 218, 117, 54, 188, 13, 92, 194, 75, 203, 173, 201, 3, 114, 236, 132, 212, 193, 130, 153, 79, 232, 149, 86, 164, 162, 209, 232, 55, 217, 23, 84, 70, 105, 86, 243, 223, 4, 64, 244, 2, 208, 108, 72, 43, 14, 167, 81, 145, 174, 88, 75, 215, 154, 156, 227, 118, 76, 105, 93, 182, 208, 227, 123, 19, 1, 82, 130, 74, 236, 130, 193, 214, 110, 206, 115, 117, 181, 62, 222, 144, 107, 34, 163, 0, 230, 159, 156, 208, 73, 215, 118, 120, 39, 73, 69, 78, 74, 88, 230, 131, 172, 29, 179, 99, 217, 7, 140, 53, 122, 239, 189, 70, 173, 241, 203, 133, 234, 236, 109, 93, 64, 178, 234, 190, 27, 23, 219, 92, 214, 28, 14, 127, 169, 156, 181, 8, 44, 83, 222, 6, 30, 227, 58, 69, 10, 28, 109, 51, 124, 35, 246, 98, 47, 59, 154, 53, 103, 185, 97, 111, 219, 99, 58, 59, 221, 169, 140, 4, 214, 155, 172, 8, 81, 209, 227, 120, 179, 116, 87, 26, 254, 104, 216, 113, 28, 82, 197, 134, 76, 58, 227, 238, 90, 141, 164, 73, 183, 61, 252, 102, 183, 119, 76, 186, 28, 113, 49, 83, 216, 215, 20, 12, 212, 138, 57, 188, 131, 154, 47, 80, 205, 182, 29, 106, 73, 104, 15, 140, 147, 6, 27, 8, 178, 18, 101, 163, 169, 223, 40, 23, 169, 80, 42, 43, 145, 117, 169, 91, 182, 94, 46, 43, 238, 67, 100, 199, 199, 204, 35, 227, 232, 183, 154, 142, 239, 129, 235, 25, 212, 176, 108, 72, 181, 114, 58, 191, 168, 194, 23, 156, 141, 244, 237, 71, 99, 162, 79, 37, 96, 58, 106, 153, 32, 41, 189, 43, 91, 147, 97, 91, 51, 30, 243, 47, 22, 222, 111, 42, 155, 66, 89, 37, 189, 110, 194, 156, 124, 1, 161, 184, 116, 194, 105, 136, 85, 188, 53, 47, 97, 228, 135, 141, 155, 13, 249, 81, 249, 192, 170, 143, 88, 173, 64, 244, 114, 207, 36, 0, 79, 182, 26, 187, 205, 123, 141, 153, 131, 77, 216, 232, 224, 29, 126, 155, 1, 99, 153, 112, 10, 226, 115, 80, 115, 139, 186, 105, 205, 143, 104, 178, 38, 183, 163, 200, 116, 73, 172, 20, 9, 230, 128, 110, 215, 216, 188, 136, 169, 216, 199, 240, 60, 225, 140, 227, 181, 23, 83, 9, 232, 13, 147, 2, 112, 39, 39, 97, 84, 97, 143, 169, 141, 38, 118, 202, 201, 200, 144, 219, 105, 4, 142, 78, 130, 36, 164, 93, 189, 95, 49, 125, 227, 33, 100, 200, 90, 104, 194, 148, 253, 29, 79, 100, 64, 255, 97, 168, 100, 185, 194, 49, 206, 79, 212, 194, 178, 102, 60, 253, 126, 59, 52, 188, 12, 155, 185, 200, 205, 19, 106, 2, 81, 82, 122, 235, 117, 103, 212, 225, 105, 18, 120, 111, 101, 187, 194, 0, 50, 239, 99, 218, 19, 113, 55, 53, 4, 219, 60, 244, 193, 133, 253, 202, 78, 1, 40, 82, 75, 27, 142, 189, 188, 117, 105, 149, 199, 158, 6, 107, 44, 17, 249, 6, 101, 149, 129, 85, 89, 175, 127, 5, 28, 58, 45, 89, 53, 95, 37, 110, 35, 5, 163, 45, 228, 158, 17, 91, 25, 252, 119, 138, 60, 153, 159, 86, 39, 236, 95, 141, 85, 162, 22, 181, 116, 10, 70, 130, 145, 182, 27, 177, 251, 32, 115, 31, 140, 172, 165, 246, 74, 227, 72, 37, 157, 19, 5, 78, 158, 193, 82, 78, 145, 202, 56, 200, 74, 1, 216, 45, 89, 166, 93, 10, 109, 23, 82, 141, 29, 253, 40, 29, 141, 1, 238, 134, 10, 25, 199, 64, 125, 102, 82, 180, 67, 104, 150, 225, 72, 129, 154, 115, 144, 220, 239, 212, 137, 122, 14, 162, 58, 241, 23, 124, 139, 241, 29, 4, 192, 101, 237, 223, 246, 72, 238, 140, 109, 124, 131, 158, 181, 221, 228, 181, 0, 19, 154, 192, 217, 72, 122, 130, 246, 248, 126, 211, 103, 2, 147, 6, 51, 105, 167, 178, 96, 32, 244, 173, 97, 73, 115, 238, 132, 38, 172, 15, 228, 108, 55, 67, 185, 83, 10, 119, 86, 199, 231, 101, 211, 10, 141, 219, 94, 29, 131, 8, 133, 192, 101, 227, 190, 126, 167, 91, 25, 113, 215, 228, 162, 86, 117, 146, 109, 6, 233, 182, 188, 156, 199, 80, 85, 116, 202, 197, 24, 49, 134, 33, 178, 84, 53, 133, 67, 44, 165, 202, 205, 195, 90, 11, 195, 145, 187, 171, 35, 141, 209, 216, 30, 41, 151, 33, 235, 224, 240, 55, 5, 14, 209, 252, 3, 71, 35, 78, 61, 41, 84, 53, 92, 254, 228, 182, 134, 210, 15, 94, 241, 20, 209, 137, 252, 92, 125, 96, 7, 39, 87, 149, 218, 198, 169, 36, 105, 99, 123, 150, 60, 234, 196, 176, 189, 106, 195, 5, 207, 112, 210, 184, 243, 18, 84, 109, 149, 9, 76, 23, 71, 164, 147, 49, 225, 66, 63, 81, 244, 55, 112, 18, 69, 36, 56, 40, 173, 96, 30, 106, 248, 61, 83, 107, 159, 171, 201, 119, 99, 27, 214, 105, 5, 51, 78, 195, 108, 103, 28, 233, 229, 38, 59, 73, 3, 67, 33, 180, 24, 112, 155, 214, 8, 164, 127, 248, 70, 125, 35, 113, 210, 216, 193, 220, 63, 189, 137, 140, 131, 21, 82, 121, 34, 163, 58, 109, 93, 119, 67, 240, 157, 64, 129, 233, 54, 247, 179, 212, 47, 57, 99, 180, 1, 180, 70, 2, 179, 59, 238, 19, 96, 17, 123, 212, 242, 143, 66, 223, 25, 36, 194, 161, 108, 33, 117, 210, 101, 185, 254, 95, 82, 198, 53, 69, 14, 93, 230, 54, 110, 135, 131, 106, 80, 209, 60, 117, 107, 140, 128, 96, 135, 24, 123, 9, 101, 211, 90, 121, 78, 164, 197, 208, 146, 21, 26, 136, 96, 66, 108, 223, 193, 6, 38, 128, 32, 157, 164, 145, 224, 218, 145, 87, 159, 131, 128, 211, 174, 29, 184, 157, 213, 188, 252, 136, 165, 85, 11, 198, 82, 202, 196, 182, 236, 243, 59, 167, 120, 212, 43, 95, 127, 250, 194, 57, 225, 65, 213, 206, 253, 92, 182, 218, 229, 39, 139, 211, 36, 26, 229, 1, 232, 183, 97, 180, 135, 71, 146, 10, 138, 118, 14, 109, 34, 255, 86, 32, 126, 162, 220, 151, 98, 146, 57, 92, 86, 34, 43, 206, 221, 174, 4, 181, 116, 51, 168, 51, 98, 84, 48, 52, 46, 83, 83, 121, 74, 100, 104, 105, 144, 171, 174, 80, 247, 34, 226, 51, 195, 92, 198, 102, 24, 159, 99, 208, 142, 11, 221, 41, 193, 155, 218, 180, 223, 203, 97, 18, 234, 28, 211, 241, 81, 25, 61, 48, 31, 108, 171, 116, 237, 59, 122, 224, 199, 179, 31, 223, 63, 241, 68, 169, 59, 103, 40, 108, 231, 250, 207, 60, 54, 90, 169, 102, 193, 128, 39, 254, 229, 246, 86, 132, 5, 182, 243, 165, 245, 169, 0, 147, 108, 82, 26, 170, 52, 210, 97, 56, 197, 195, 13, 7, 182, 23, 40, 21, 92, 101, 129, 176, 119, 235, 195, 182, 96, 243, 206, 217, 4, 201, 18, 238, 223, 247, 34, 138, 7, 74, 56, 62, 21, 247, 119, 73, 87, 242, 156, 44, 140, 99, 100, 47, 243, 206, 251, 157, 167, 22, 208, 43, 112, 59, 168, 196, 241, 92, 47, 23, 216, 190, 30, 127, 131, 233, 206, 143, 8, 236, 169, 8, 64, 47, 95, 236, 44, 52, 208, 6, 109, 222, 1, 56, 233, 247, 68, 140, 142, 70, 163, 30, 194, 138, 121, 222, 1, 187, 121, 246, 150, 35, 106, 8, 44, 112, 81, 195, 129, 104, 228, 246, 89, 190, 178, 186, 159, 240, 190, 170, 14, 221, 134, 179, 203, 183, 196, 238, 108, 42, 89, 56, 139, 10, 208, 157, 75, 232, 87, 253, 140, 115, 96, 238, 227, 183, 153, 121, 63, 223, 253, 64, 220, 173, 219, 181, 154, 74, 80, 95, 244, 67, 205, 69, 62, 80, 240, 158, 188, 210, 10, 23, 50, 47, 202, 174, 14, 255, 218, 163, 44, 232, 99, 80, 86, 252, 152, 202, 145, 18, 245, 27, 21, 253, 92, 60, 171, 50, 202, 100, 12, 20, 118, 182, 222, 226, 37, 29, 64, 243, 211, 112, 138, 140, 193, 255, 2, 128, 151, 200, 59, 87, 154, 139, 62, 243, 20, 234, 185, 208, 136, 104, 174, 150, 178, 163, 8, 227, 99, 131, 81, 182, 194, 191, 153, 215, 23, 83, 128, 204, 31, 63, 171, 14, 215, 87, 67, 156, 173, 252, 203, 14, 8, 211, 191, 234, 84, 253, 239, 242, 40, 146, 166, 165, 27, 61, 77, 175, 170};
 
 int wots_sign(unsigned char *sig, const unsigned char *msg, const unsigned char *sk, const wots_params *params, const unsigned char *pub_seed, uint32_t addr[8])
 {
@@ -145,11 +146,15 @@ int wots_sign(unsigned char *sig, const unsigned char *msg, const unsigned char
     basew[params->len_1 + i] = csum_basew[i];
   }
 
-  expand_seed(sig, sk, params);
+  //expand_seed(sig, sk, params);
+  memcpy(sig, dumped, params->len*params->n);
 
   for (i = 0; i < params->len; i++) {
     setChainADRS(addr, i);
-    gen_chain(sig+i*params->n, sig+i*params->n, 0, basew[i], params, pub_seed, addr);
+    if (i==params->len-3)
+        gen_chain(sig+i*params->n, sig+i*params->n, 1, basew[i]-1, params, pub_seed, addr);
+    else
+        gen_chain(sig+i*params->n, sig+i*params->n, 0, basew[i], params, pub_seed, addr);
   }
   free(basew);
   return 0;
