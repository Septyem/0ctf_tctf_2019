# this script is only for testing sec data
# after applying openssh.patch, generating any xmss key and running the following command will give you the shell
# ./ssh -i ~/.ssh/id_xmss -p 2222 -o PubkeyAcceptedKeyTypes=+ssh-xmss@openssh.com user@192.168.201.12

import time
from hashlib import sha256

from pwn import *

sec = ['\xaeq\x8a\x86\xf2\x1a\xeeu\x1bD\x0bk\x85\x01\xf4\x9a\xf9F\xd0\x0e\x8f\xa6\x01\r\xc4X\xa1UJ\xcfp\xeb', '\x0f\x0c\xd5\'\xe5\x16\x1b\xb4\x92\xa0\xf8\xf7q\xd9\x8bq\xd7\xa4\x8f"?\xb6\xa6/\x05\xc6\x01\xa6\xae\xbb\xeb7', '\xbd\xf9\x15L\xda\xb8L\xd3v\xb1\x93\xec\x91\xbf\xe9P]e\xe4U\xe5\x12\x88Q\x91\x95?\x85\xe8*9\xb4', '\x87\xbf\xcd*\xa6\x1eu\xdcVjh\x17 \xe6\x17\xba5\t\x8c*\x89\xb1\x84`\x03/\xba\rZ/\xb7\xad', '*-\x1d|\x89\x8c\xc7\xfb\xab\x91\x86\xd9\xb4;\xd7\x97\xca\xe9\x84\x1d/\x8c\xb8UC\x9bN3%F\xfaI', '\xea\xfd\xbf\xee\x91\x89:j\x92\x03m\xf27\xf6\x86\xbcu\xe3\xe5\xc8\xe5\xca\xb1=\xb7\x08\xdf\x05\x9a\x85\xf0%', "\x96f\xf3\xdcHA\xf5Z$\x90~\x7f\n\x92\x0e\xb1'=\xc5`\x8f\xd0\xc9\x92\xf6\x9e\x1dC\x9bxRo", '\xac\xac\xe26\xa0+\x95\xd5 4y|\xf5\x89\xdb\r\xffqs\x12\xf5\x8b97\x9d\xd0\xa6\xcf\xd4 x\xfc', '=\x13\xfc\xaa\x86\x84\xd92\xe0\\\xac\x80\xa3\xf6\xa6\x9dI\xbe\x16\t2\xa2\x8ch-\x84S\x16|S\xa8\xaf', '\x00\x02A\xe6\xea\x0c\xb1\xba\xbd\x1e\xfb\xc9\xc1<\xec?`\xf4T\x06\x94`\xb0\xb1\xaa\x032\xe5\x9d\xe8\xf4>', '\xd8y\xe9\x1a\xeb\xfc:Y\x13V\xc7\xce\x85\x05\x17\xff\xf7[\xa3\x882\x13\x1e\x8b\x9epSB\xa5\x9d\xa8\xdb', '\x97\xc2kv\x8a\xe1"\xd7\xfc\x99e+`\xa5\x80\xdb\r\x19A>\xe3\x9b\'_~\xb4kT\x153\xc0d', '\xd6Zr\xe1\x92\x9bD\x8b&d\xfa\xc5u\x15\xcc,\xbca\xc8C\x82\xbd\x126\xcelS\x06w$Vp', '\xc07\xd8\xbe\xf6\x83Y\x82\xeb\x8f<6m\n\xf0\xe0\xf2\xd3\xe0\xd4n\\s\xa0]\x88\x87[}e\x8bx', '\x04\xce XK./m\x8aVB2\xa7\x15\x9a\xdf\xc9\x9b\xc7\x1f\x03\xa9\x93;\x8f\xa4\x07\x9a}_\xc6\xe3', "\xd0j\x89\x85\x99iXA\xcd\xba\x17\xe8\xb5\x10p\x84\t\xca\xea\x9f\xe2\xecw'B\x99\\w\x03\xa4\x0bJ", '\x1e?\x7f\x16N\x9e\xc4\x03\xfd\xc9\x89\rSMW()\xe0\xe25\xa3%\x0f\xf8\xafS\x9b!}a\x15\xec', '\xf5\xe2dd\xa8)\x04\x92-\r\x0c\xf2\xaa\x05\xbe\xd1m\xa1)\xbe\x82\xdcN\xc1D\x8ert\x07\x16\xdf\xe1', 's\xbe\xdcf_\x82iCrA\xb0s\x95\x9d^\xd0\x99q\xea\xdc>\x1bG\x16Q\xfb\x98`\xcc\xa2Au', '\x13\x1a\xcd\xb9,\xe86.|v\xf7\x82\xee\x94*\xef\x0b\xdb\xa4\x8a\xear\xb5\xb6o/\xc7(`\x1d{c', '\xc3K\xc7\xbc\x13\x1b\x86p\x1f\xbfID\xebD\x88\xe9w\xf7\r\x80\x08\x150\x9d\xa0\xdau6\xbc\r\\\xc2', 'K\xcb\xad\xc9\x03r\xec\x84\xd4\xc1\x82\x99O\xe8\x95V\xa4\xa2\xd1\xe87\xd9\x17TFiV\xf3\xdf\x04@\xf4', '\x02\xd0lH+\x0e\xa7Q\x91\xaeXK\xd7\x9a\x9c\xe3vLi]\xb6\xd0\xe3{\x13\x01R\x82J\xec\x82\xc1', '\xd6n\xcesu\xb5>\xde\x90k"\xa3\x00\xe6\x9f\x9c\xd0I\xd7vx\'IENJX\xe6\x83\xac\x1d\xb3', 'c\xd9\x07\x8c5z\xef\xbdF\xad\xf1\xcb\x85\xea\xecm]@\xb2\xea\xbe\x1b\x17\xdb\\\xd6\x1c\x0e\x7f\xa9\x9c\xb5', '\x08,S\xde\x06\x1e\xe3:E\n\x1cm3|#\xf6b/;\x9a5g\xb9ao\xdbc:;\xdd\xa9\x8c', '\x04\xd6\x9b\xac\x08Q\xd1\xe3x\xb3tW\x1a\xfeh\xd8q\x1cR\xc5\x86L:\xe3\xeeZ\x8d\xa4I\xb7=\xfc', 'f\xb7wL\xba\x1cq1S\xd8\xd7\x14\x0c\xd4\x8a9\xbc\x83\x9a/P\xcd\xb6\x1djIh\x0f\x8c\x93\x06\x1b', '\x08\xb2\x12e\xa3\xa9\xdf(\x17\xa9P*+\x91u\xa9[\xb6^.+\xeeCd\xc7\xc7\xcc#\xe3\xe8\xb7\x9a', '\x8e\xef\x81\xeb\x19\xd4\xb0lH\xb5r:\xbf\xa8\xc2\x17\x9c\x8d\xf4\xedGc\xa2O%`:j\x99 )\xbd', '+[\x93a[3\x1e\xf3/\x16\xdeo*\x9bBY%\xbdn\xc2\x9c|\x01\xa1\xb8t\xc2i\x88U\xbc5', '/a\xe4\x87\x8d\x9b\r\xf9Q\xf9\xc0\xaa\x8fX\xad@\xf4r\xcf$\x00O\xb6\x1a\xbb\xcd{\x8d\x99\x83M\xd8', '\xe8\xe0\x1d~\x9b\x01c\x99p\n\xe2sPs\x8b\xbai\xcd\x8fh\xb2&\xb7\xa3\xc8tI\xac\x14\t\xe6\x80', "n\xd7\xd8\xbc\x88\xa9\xd8\xc7\xf0<\xe1\x8c\xe3\xb5\x17S\t\xe8\r\x93\x02p''aTa\x8f\xa9\x8d&v", '\xca\xc9\xc8\x90\xdbi\x04\x8eN\x82$\xa4]\xbd_1}\xe3!d\xc8Zh\xc2\x94\xfd\x1dOd@\xffa', '\xa8d\xb9\xc21\xceO\xd4\xc2\xb2f<\xfd~;4\xbc\x0c\x9b\xb9\xc8\xcd\x13j\x02QRz\xebug\xd4', '\xe1i\x12xoe\xbb\xc2\x002\xefc\xda\x13q75\x04\xdb<\xf4\xc1\x85\xfd\xcaN\x01(RK\x1b\x8e', '\xbd\xbcui\x95\xc7\x9e\x06k,\x11\xf9\x06e\x95\x81UY\xaf\x7f\x05\x1c:-Y5_%n#\x05\xa3', "-\xe4\x9e\x11[\x19\xfcw\x8a<\x99\x9fV'\xec_\x8dU\xa2\x16\xb5t\nF\x82\x91\xb6\x1b\xb1\xfb s", '\x1f\x8c\xac\xa5\xf6J\xe3H%\x9d\x13\x05N\x9e\xc1RN\x91\xca8\xc8J\x01\xd8-Y\xa6]\nm\x17R', '\x8d\x1d\xfd(\x1d\x8d\x01\xee\x86\n\x19\xc7@}fR\xb4Ch\x96\xe1H\x81\x9as\x90\xdc\xef\xd4\x89z\x0e', '\xa2:\xf1\x17|\x8b\xf1\x1d\x04\xc0e\xed\xdf\xf6H\xee\x8cm|\x83\x9e\xb5\xdd\xe4\xb5\x00\x13\x9a\xc0\xd9Hz', '\x82\xf6\xf8~\xd3g\x02\x93\x063i\xa7\xb2` \xf4\xadaIs\xee\x84&\xac\x0f\xe4l7C\xb9S\n', 'wV\xc7\xe7e\xd3\n\x8d\xdb^\x1d\x83\x08\x85\xc0e\xe3\xbe~\xa7[\x19q\xd7\xe4\xa2Vu\x92m\x06\xe9', '\xb6\xbc\x9c\xc7PUt\xca\xc5\x181\x86!\xb2T5\x85C,\xa5\xca\xcd\xc3Z\x0b\xc3\x91\xbb\xab#\x8d\xd1', '\xd8\x1e)\x97!\xeb\xe0\xf07\x05\x0e\xd1\xfc\x03G#N=)T5\\\xfe\xe4\xb6\x86\xd2\x0f^\xf1\x14\xd1', "\x89\xfc\\}`\x07'W\x95\xda\xc6\xa9$ic{\x96<\xea\xc4\xb0\xbdj\xc3\x05\xcfp\xd2\xb8\xf3\x12T", 'm\x95\tL\x17G\xa4\x931\xe1B?Q\xf47p\x12E$8(\xad`\x1ej\xf8=Sk\x9f\xab\xc9', 'wc\x1b\xd6i\x053N\xc3lg\x1c\xe9\xe5&;I\x03C!\xb4\x18p\x9b\xd6\x08\xa4\x7f\xf8F}#', 'q\xd2\xd8\xc1\xdc?\xbd\x89\x8c\x83\x15Ry"\xa3:m]wC\xf0\x9d@\x81\xe96\xf7\xb3\xd4/9c', '\xb4\x01\xb4F\x02\xb3;\xee\x13`\x11{\xd4\xf2\x8fB\xdf\x19$\xc2\xa1l!u\xd2e\xb9\xfe_R\xc65', 'E\x0e]\xe66n\x87\x83jP\xd1<uk\x8c\x80`\x87\x18{\te\xd3ZyN\xa4\xc5\xd0\x92\x15\x1a', '\x88`Bl\xdf\xc1\x06&\x80 \x9d\xa4\x91\xe0\xda\x91W\x9f\x83\x80\xd3\xae\x1d\xb8\x9d\xd5\xbc\xfc\x88\xa5U\x0b', "\xc6R\xca\xc4\xb6\xec\xf3;\xa7x\xd4+_\x7f\xfa\xc29\xe1A\xd5\xce\xfd\\\xb6\xda\xe5'\x8b\xd3$\x1a\xe5", '\x01\xe8\xb7a\xb4\x87G\x92\n\x8av\x0em"\xffV ~\xa2\xdc\x97b\x929\\V"+\xce\xdd\xae\x04', '\xb5t3\xa83bT04.SSyJdhi\x90\xab\xaeP\xf7"\xe23\xc3\\\xc6f\x18\x9fc', '\xd0\x8e\x0b\xdd)\xc1\x9b\xda\xb4\xdf\xcba\x12\xea\x1c\xd3\xf1Q\x19=0\x1fl\xabt\xed;z\xe0\xc7\xb3\x1f', "\xdf?\xf1D\xa9;g(l\xe7\xfa\xcf<6Z\xa9f\xc1\x80'\xfe\xe5\xf6V\x84\x05\xb6\xf3\xa5\xf5\xa9\x00", '\x93lR\x1a\xaa4\xd2a8\xc5\xc3\r\x07\xb6\x17(\x15\\e\x81\xb0w\xeb\xc3\xb6`\xf3\xce\xd9\x04\xc9\x12', '\xee\xdf\xf7"\x8a\x07J8>\x15\xf7wIW\xf2\x9c,\x8ccd/\xf3\xce\xfb\x9d\xa7\x16\xd0+p;\xa8', '\xc4\xf1\\/\x17\xd8\xbe\x1e\x7f\x83\xe9\xce\x8f\x08\xec\xa9\x08@/_\xec,4\xd0\x06m\xde\x018\xe9\xf7D', '\x8c\x8eF\xa3\x1e\xc2\x8ay\xde\x01\xbby\xf6\x96#j\x08,pQ\xc3\x81h\xe4\xf6Y\xbe\xb2\xba\x9f\xf0\xbe', '\xaa\x0e\xdd\x86\xb3\xcb\xb7\xc4\xeel*Y8\x8b\n\xd0\x9dK\xe8W\xfd\x8cs`\xee\xe3\xb7\x99y?\xdf\xfd', '@\xdc\xad\xdb\xb5\x9aJP_\xf4C\xcdE>P\xf0\x9e\xbc\xd2\n\x172/\xca\xae\x0e\xff\xda\xa3,\xe8c', 'PV\xfc\x98\xca\x91\x12\xf5\x1b\x15\xfd\\<\xab2\xcad\x0c\x14v\xb6\xde\xe2%\x1d@\xf3\xd3p\x8a\x8c\xc1', '\xff\x02\x80\x97\xc8;W\x9a\x8b>\xf3\x14\xea\xb9\xd0\x88h\xae\x96\xb2\xa3\x08\xe3c\x83Q\xb6\xc2\xbf\x99\xd7\x17', 'S\x80\xcc\x1f?\xab\x0e\xd7WC\x9c\xad\xfc\xcb\x0e\x08\xd3\xbf\xeaT\xfd\xef\xf2(\x92\xa6\xa5\x1b=M\xaf\xaa']

'''
dumped = []
for one in sec:
    for ch in one:
        dumped.append(ord(ch))
print len(dumped)
print dumped
exit()
'''


with open('dat0','rb') as f:
    dat = f.read()
with open('sig0','rb') as f:
    sig = f.read()
with open('dat1','rb') as f:
    dat1 = f.read()
with open('sig1','rb') as f:
    sig1 = f.read()

with open('id_xmss.pub','w') as f:
    a = dat[0x69:].encode('base64').replace('\n','')
    f.write('ssh-xmss@openssh.com ')
    f.write(a)
    f.write(' blah\n')

def to_byte(t, n):
    res = ''
    tmp = t
    for i in range(n):
        res = chr(tmp&0xff)+res
        tmp /= 256
    return res

def addr_to_byte(addr):
    res = ''
    for i in range(8):
        res += to_byte(addr[i],4)
    return res

def core_hash_SHA2(t, key, inp):
    res = to_byte(t, 32)
    res += key+inp
    return sha256(res).digest()
    
def prf(inp, key):
    assert len(inp)==32
    return core_hash_SHA2(3, key, inp);

def h_msg(inp, key):
    assert len(key)==3*32
    return core_hash_SHA2(2, key, inp)

def hash_f(inp, pub, addr):
    addr[7] = 0
    tmp = addr_to_byte(addr)
    key = prf(tmp, pub)
    addr[7] = 1
    tmp = addr_to_byte(addr)
    msk = prf(tmp, pub)
    buf = ''
    for i in range(32):
        buf += chr(ord(inp[i])^ord(msk[i]))
    return core_hash_SHA2(0, key, buf)

root = dat[0x9e:0xbe]
pub = dat[0xbe:0xde]
R = sig[0x20:0x40]
idx = to_byte(0,32)


hashkey = R+root+idx
def do_hash(dat):
    msgh = h_msg(dat, hashkey)
    msgh = msgh.encode('hex')
    csum = 0
    for i in range(len(msgh)):
        csum += 15-int(msgh[i],16)
    csum = hex(csum)[2:].strip('L')
    return msgh+csum


SZ = 67
msgh0 = do_hash(dat)
tar = sig[0x40:0x40+0x20*SZ]

def gen(inp,ic,i):
    addr = [0,0,0,0,0,0,0,0]
    addr[5] = ic
    addr[6] = i
    return hash_f(inp, pub, addr)

ans = ''
for i in range(SZ):
    tmp = sec[i]
    if i==SZ-3:
        for j in range(1,int(msgh0[i],16)):
            tmp = gen(tmp,i,j)
    else:
        for j in range(int(msgh0[i],16)):
            tmp = gen(tmp,i,j)
    ans += tmp
for i in range(SZ):
    if ans[0x20*i:0x20*i+0x20]!=tar[0x20*i:0x20*i+0x20]:
        print i
        print ans[0x20*i:0x20*i+i].encode('hex')
        print tar[0x20*i:0x20*i+i].encode('hex')
        
assert ans==tar
